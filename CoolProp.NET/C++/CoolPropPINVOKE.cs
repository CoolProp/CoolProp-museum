/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

class CoolPropPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("CoolProp", EntryPoint="SWIGRegisterExceptionCallbacks_CoolProp")]
    public static extern void SWIGRegisterExceptionCallbacks_CoolProp(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("CoolProp", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_CoolProp")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_CoolProp(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_CoolProp(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_CoolProp(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(CoolPropPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(CoolPropPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("CoolProp", EntryPoint="SWIGRegisterStringCallback_CoolProp")]
    public static extern void SWIGRegisterStringCallback_CoolProp(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_CoolProp(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static CoolPropPINVOKE() {
  }


  [DllImport("CoolProp", EntryPoint="CSharp_PHASE_SUPERCRITICAL_get")]
  public static extern int PHASE_SUPERCRITICAL_get();

  [DllImport("CoolProp", EntryPoint="CSharp_PHASE_SUPERHEATED_get")]
  public static extern int PHASE_SUPERHEATED_get();

  [DllImport("CoolProp", EntryPoint="CSharp_PHASE_SUBCOOLED_get")]
  public static extern int PHASE_SUBCOOLED_get();

  [DllImport("CoolProp", EntryPoint="CSharp_PHASE_TWOPHASE_get")]
  public static extern int PHASE_TWOPHASE_get();

  [DllImport("CoolProp", EntryPoint="CSharp_FLUIDTYPE_REFPROP_get")]
  public static extern int FLUIDTYPE_REFPROP_get();

  [DllImport("CoolProp", EntryPoint="CSharp_FLUIDTYPE_BRINE_get")]
  public static extern int FLUIDTYPE_BRINE_get();

  [DllImport("CoolProp", EntryPoint="CSharp_FLUIDTYPE_REFRIGERANT_PURE_get")]
  public static extern int FLUIDTYPE_REFRIGERANT_PURE_get();

  [DllImport("CoolProp", EntryPoint="CSharp_FLUIDTYPE_REFRIGERANT_PSEUDOPURE_get")]
  public static extern int FLUIDTYPE_REFRIGERANT_PSEUDOPURE_get();

  [DllImport("CoolProp", EntryPoint="CSharp_Help")]
  public static extern void Help();

  [DllImport("CoolProp", EntryPoint="CSharp_UseSaturationLUT")]
  public static extern void UseSaturationLUT(int jarg1);

  [DllImport("CoolProp", EntryPoint="CSharp_UseSinglePhaseLUT")]
  public static extern void UseSinglePhaseLUT(int jarg1);

  [DllImport("CoolProp", EntryPoint="CSharp_SinglePhaseLUTStatus")]
  public static extern int SinglePhaseLUTStatus();

  [DllImport("CoolProp", EntryPoint="CSharp_Props__SWIG_0")]
  public static extern double Props__SWIG_0(char jarg1, char jarg2, double jarg3, char jarg4, double jarg5, string jarg6);

  [DllImport("CoolProp", EntryPoint="CSharp_Props__SWIG_1")]
  public static extern double Props__SWIG_1(string jarg1, char jarg2, double jarg3, char jarg4, double jarg5, string jarg6);

  [DllImport("CoolProp", EntryPoint="CSharp_PropsV")]
  public static extern void PropsV(string jarg1, char jarg2, HandleRef jarg3, int jarg4, char jarg5, HandleRef jarg6, int jarg7, string jarg8, HandleRef jarg9, int jarg10);

  [DllImport("CoolProp", EntryPoint="CSharp_Props__SWIG_2")]
  public static extern double Props__SWIG_2(string jarg1, string jarg2);

  [DllImport("CoolProp", EntryPoint="CSharp_pcrit")]
  public static extern double pcrit(string jarg1);

  [DllImport("CoolProp", EntryPoint="CSharp_Tcrit")]
  public static extern double Tcrit(string jarg1);

  [DllImport("CoolProp", EntryPoint="CSharp_Ttriple")]
  public static extern double Ttriple(string jarg1);

  [DllImport("CoolProp", EntryPoint="CSharp_IsFluidType")]
  public static extern int IsFluidType(string jarg1, string jarg2);

  [DllImport("CoolProp", EntryPoint="CSharp_T_hp")]
  public static extern double T_hp(string jarg1, double jarg2, double jarg3, double jarg4);

  [DllImport("CoolProp", EntryPoint="CSharp_h_sp")]
  public static extern double h_sp(string jarg1, double jarg2, double jarg3, double jarg4);

  [DllImport("CoolProp", EntryPoint="CSharp_Tsat")]
  public static extern double Tsat(string jarg1, double jarg2, double jarg3, double jarg4);

  [DllImport("CoolProp", EntryPoint="CSharp_DerivTerms")]
  public static extern double DerivTerms(string jarg1, double jarg2, double jarg3, string jarg4);

  [DllImport("CoolProp", EntryPoint="CSharp_F2K")]
  public static extern double F2K(double jarg1);

  [DllImport("CoolProp", EntryPoint="CSharp_K2F")]
  public static extern double K2F(double jarg1);

  [DllImport("CoolProp", EntryPoint="CSharp_PrintSaturationTable")]
  public static extern void PrintSaturationTable(string jarg1, string jarg2, double jarg3, double jarg4);

  [DllImport("CoolProp", EntryPoint="CSharp_Phase")]
  public static extern int Phase(double jarg1, double jarg2, string jarg3);
}

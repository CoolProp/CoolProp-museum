/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CoolProp {
  public static void Help() {
    CoolPropPINVOKE.Help();
  }

  public static void UseSaturationLUT(bool OnOff) {
    CoolPropPINVOKE.UseSaturationLUT(OnOff);
  }

  public static bool SaturationLUTStatus() {
    bool ret = CoolPropPINVOKE.SaturationLUTStatus();
    return ret;
  }

  public static void UseSinglePhaseLUT(bool OnOff) {
    CoolPropPINVOKE.UseSinglePhaseLUT(OnOff);
  }

  public static bool SinglePhaseLUTStatus() {
    bool ret = CoolPropPINVOKE.SinglePhaseLUTStatus();
    return ret;
  }

  public static double Props(string Output, char Name1, double Prop1, char Name2, double Prop2, string Ref) {
    double ret = CoolPropPINVOKE.Props__SWIG_0(Output, Name1, Prop1, Name2, Prop2, Ref);
    return ret;
  }

  public static double Props1(string Output, string Ref) {
    double ret = CoolPropPINVOKE.Props1__SWIG_0(Output, Ref);
    return ret;
  }

  public static int IsFluidType(string Ref, string Type) {
    int ret = CoolPropPINVOKE.IsFluidType(Ref, Type);
    return ret;
  }

  public static double T_hp(string Ref, double h, double p, double T_guess) {
    double ret = CoolPropPINVOKE.T_hp(Ref, h, p, T_guess);
    return ret;
  }

  public static double h_sp(string Ref, double s, double p, double T_guess) {
    double ret = CoolPropPINVOKE.h_sp(Ref, s, p, T_guess);
    return ret;
  }

  public static double DerivTerms(string Term, double T, double rho, string Ref) {
    double ret = CoolPropPINVOKE.DerivTerms(Term, T, rho, Ref);
    return ret;
  }

  public static void Phase(string Fluid, double T, double p, string Phase_str) {
    CoolPropPINVOKE.Phase__SWIG_0(Fluid, T, p, Phase_str);
  }

  public static double F2K(double T_F) {
    double ret = CoolPropPINVOKE.F2K(T_F);
    return ret;
  }

  public static double K2F(double T) {
    double ret = CoolPropPINVOKE.K2F(T);
    return ret;
  }

  public static void PrintSaturationTable(string FileName, string Ref, double Tmin, double Tmax) {
    CoolPropPINVOKE.PrintSaturationTable(FileName, Ref, Tmin, Tmax);
  }

  public static void FluidsList(string arg0) {
    CoolPropPINVOKE.FluidsList__SWIG_0(arg0);
  }

  public static void get_REFPROPname(string Ref, string arg1) {
    CoolPropPINVOKE.get_REFPROPname__SWIG_0(Ref, arg1);
  }

  public static void get_errstring(string arg0) {
    CoolPropPINVOKE.get_errstring__SWIG_0(arg0);
  }

  public static string get_errstringc() {
    string ret = CoolPropPINVOKE.get_errstringc();
    return ret;
  }

  public static int set_1phase_LUT_params(string Ref, int nT, int np, double Tmin, double Tmax, double pmin, double pmax, bool rebuild) {
    int ret = CoolPropPINVOKE.set_1phase_LUT_params__SWIG_0(Ref, nT, np, Tmin, Tmax, pmin, pmax, rebuild);
    return ret;
  }

  public static void get_1phase_LUT_params(SWIGTYPE_p_int nT, SWIGTYPE_p_int np, SWIGTYPE_p_double Tmin, SWIGTYPE_p_double Tmax, SWIGTYPE_p_double pmin, SWIGTYPE_p_double pmax) {
    CoolPropPINVOKE.get_1phase_LUT_params(SWIGTYPE_p_int.getCPtr(nT), SWIGTYPE_p_int.getCPtr(np), SWIGTYPE_p_double.getCPtr(Tmin), SWIGTYPE_p_double.getCPtr(Tmax), SWIGTYPE_p_double.getCPtr(pmin), SWIGTYPE_p_double.getCPtr(pmax));
  }

  public static int get_debug() {
    int ret = CoolPropPINVOKE.get_debug();
    return ret;
  }

  public static void debug(int level) {
    CoolPropPINVOKE.debug__SWIG_0(level);
  }

  public static double Props(string Fluid, string Output) {
    double ret = CoolPropPINVOKE.Props__SWIG_1(Fluid, Output);
    return ret;
  }

  public static int set_1phase_LUT_params(string Ref, int nT, int np, double Tmin, double Tmax, double pmin, double pmax) {
    int ret = CoolPropPINVOKE.set_1phase_LUT_params__SWIG_2(Ref, nT, np, Tmin, Tmax, pmin, pmax);
    return ret;
  }

  public static int debug() {
    int ret = CoolPropPINVOKE.debug__SWIG_1();
    return ret;
  }

  public static string Phase(string Fluid, double T, double p) {
    string ret = CoolPropPINVOKE.Phase__SWIG_1(Fluid, T, p);
    if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string get_EOSReference(string Ref) {
    string ret = CoolPropPINVOKE.get_EOSReference(Ref);
    if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string get_TransportReference(string Ref) {
    string ret = CoolPropPINVOKE.get_TransportReference(Ref);
    if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string FluidsList() {
    string ret = CoolPropPINVOKE.FluidsList__SWIG_1();
    return ret;
  }

  public static string get_REFPROPname(string Ref) {
    string ret = CoolPropPINVOKE.get_REFPROPname__SWIG_1(Ref);
    if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string get_errstring() {
    string ret = CoolPropPINVOKE.get_errstring__SWIG_1();
    return ret;
  }

}

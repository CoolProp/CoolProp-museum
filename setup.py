
from distutils.core import setup, Extension
import subprocess,shutil,os,sys
from Cython.Distutils import build_ext
from Cython.Distutils.extension import Extension as CyExtension

if len(sys.argv)==1:
    sys.argv+=['install']
    
def availableFluids(purefluidPathList,pseudopureFluidLise):
    header="#This file is automatically generated by the CoolProp setup.py script.  Do not modify this file.  Instead, modify setup.py\n\n"
    line=header
    
    refstring=''
    for fluid in purefluidPathList:
        refstring+=fluid.rsplit(os.sep)[-1].split('.')[0]+','
    refstring=refstring.rstrip(',')
    line+="__pure_fluids__=\'{0}\'\n".format(refstring)
    
    refstring=''
    for fluid in pseudopureFluidLise:
        refstring+=fluid.rsplit(os.sep)[-1].split('.')[0]+','
    refstring=refstring.rstrip(',')
    line+="__pseudo_pure_fluids__=\'{0}\'\n".format(refstring)
    
    return line
    
# Obtain the numpy include directory.  This logic works across numpy versions.
## import numpy
## try:
##     numpy_include = numpy.get_include()
## except AttributeError:
##     numpy_include = numpy.get_numpy_include()
numpy_include=[]

version='1.4.0'

#This will automagically find all the fluid sources as long as they are in the right folders
#Pure fluids should all be in the src/purefluids folder relative to setup.py
#Pseudo-Pure fluids should all be in the src/pseudopurefluids folder relative to setup.py
import glob
purefluids=glob.glob(os.path.join('src','purefluids','*.cpp'))
pseudopurefluids=glob.glob(os.path.join('src','pseudopurefluids','*.cpp'))
others=glob.glob(os.path.join('src','*.cpp'))
Sources=purefluids+pseudopurefluids+others

#Build a list of all the available fluids - added to __init__.py
FluidsList=availableFluids(purefluids,pseudopurefluids)

#Unpack the __init__.py file template and add some things to the __init__ file
lines=open('__init__.py.template','r').readlines()
    
for i in range(len(lines)-1,-1,-1):
    if lines[i].strip().startswith('#') or len(lines[i].strip())==0: 
        lines.pop(i)
lines=[FluidsList]+['__version__=\''+version+'\'\n']+lines
fp=open('__init__.py','w')
for line in lines:
    fp.write(line)
fp.close()

##==== start of SWIG code =======

swig_opts=['-builtin','-c++','-python']

"""
In this block of code, all the files that require SWIG are rebuilt on an as needed basis.  
If the target file X_wrap.cpp doesn't exist, or is older than the X.i file, SWIG
is called to rebuilt the file

swig_sources[(source,target)]

"""
swig_sources=[(os.path.join('src','CoolProp.i'),'CoolProp_wrap.cpp'),
              (os.path.join('src','FloodProp.i'),'FloodProp_wrap.cpp'),
              (os.path.join('src','HumidAirProp.i'),'HumidAirProp_wrap.cpp')]

for source,target in swig_sources:
    
    def rebuild_swig(source,target):
        swig_call=['swig']+swig_opts+['-o',target,source]
        print 'Swigging '+source+' to '+target+' ....'
        print swig_call
        subprocess.call(swig_call)
        
    #if the target doesn't exist or the wrapped C++ code is newer
    if not os.path.exists(target) or os.path.getmtime(source)>os.path.getmtime(target):
        rebuild_swig(source,target)
    else:
        print 'No SWIG required for '+source+' --> '+target+' (up-to-date)'
        
##==== end of SWIG code =======

CoolProp_module = Extension('_CoolProp',
                           sources=['CoolProp_wrap.cpp']+Sources,
                           #swig_opts=['-builtin']
                           swig_opts=['-builtin','-c++'],
                           #swig_opts=['-c++'],
                           include_dirs = ['src',os.path.join('src','purefluids'),os.path.join('src','pseudopurefluids')],
                           )

FloodProp_module = Extension('_FloodProp',
                           sources=['FloodProp_wrap.cpp']+Sources,
                           swig_opts=['-c++'],
                           include_dirs = ['src',os.path.join('src','purefluids'),os.path.join('src','pseudopurefluids')],
                           )

HumidAirProp_module = Extension('_HumidAirProp',
                           sources=['HumidAirProp_wrap.cpp']+Sources,
                           swig_opts=['-c++'],
                           include_dirs = ['src',os.path.join('src','purefluids'),os.path.join('src','pseudopurefluids')],
                           )                     

State_module = CyExtension('State',["State.pyx"],language='c++',libraries=['CoolProp'],library_dirs=['CoolPropDLL'],
                           include_dirs = ['src',os.path.join('src','purefluids'),os.path.join('src','pseudopurefluids')])

setup (name = 'CoolProp',
       version = version, #look above for the definition of version variable - don't modify it here
       author = "Ian Bell",
       author_email='ian.h.bell@gmail.com',
       url='http://coolprop.sourceforge.net',
       description = """Properties of pure fluids, pseudo-pure fluids and brines""",
       packages = ['CoolProp','CoolProp.Plots'],
       ext_package = 'CoolProp',
       ext_modules = [CoolProp_module,FloodProp_module,HumidAirProp_module,State_module],
       package_dir = {'CoolProp':'',},
       cmdclass={'build_ext': build_ext}
       )

## Clean up the intermediate files that SWIG generates
if 'clean' in sys.argv:
    FileList=['__init__.py','CoolProp.py','CoolProp_wrap.cpp','FloodProp.py','FloodProp_wrap.cpp','HumidAirProp.py','HumidAirProp_wrap.cpp']
    for file in FileList:
        try:
            os.remove(file)
        except:
            print "Sorry, couldn't remove the file "+file

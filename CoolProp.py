# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CoolProp', [dirname(__file__)])
        except ImportError:
            import _CoolProp
            return _CoolProp
        if fp is not None:
            try:
                _mod = imp.load_module('_CoolProp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CoolProp = swig_import_helper()
    del swig_import_helper
else:
    import _CoolProp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


refpropcharlength = _CoolProp.refpropcharlength
filepathlength = _CoolProp.filepathlength
lengthofreference = _CoolProp.lengthofreference
errormessagelength = _CoolProp.errormessagelength
ncmax = _CoolProp.ncmax
numparams = _CoolProp.numparams
maxcoefs = _CoolProp.maxcoefs

def SecFluids(*args):
  return _CoolProp.SecFluids(*args)
SecFluids = _CoolProp.SecFluids

def Props(*args):
  return _CoolProp.Props(*args)
Props = _CoolProp.Props

def pcrit(*args):
  return _CoolProp.pcrit(*args)
pcrit = _CoolProp.pcrit

def Tcrit(*args):
  return _CoolProp.Tcrit(*args)
Tcrit = _CoolProp.Tcrit

def errCode(*args):
  return _CoolProp.errCode(*args)
errCode = _CoolProp.errCode

def T_hp(*args):
  return _CoolProp.T_hp(*args)
T_hp = _CoolProp.T_hp

def h_sp(*args):
  return _CoolProp.h_sp(*args)
h_sp = _CoolProp.h_sp

def Tsat(*args):
  return _CoolProp.Tsat(*args)
Tsat = _CoolProp.Tsat

def K2F(*args):
  return _CoolProp.K2F(*args)
K2F = _CoolProp.K2F

def F2K(*args):
  return _CoolProp.F2K(*args)
F2K = _CoolProp.F2K

def PrintSaturationTable(*args):
  return _CoolProp.PrintSaturationTable(*args)
PrintSaturationTable = _CoolProp.PrintSaturationTable

def DerivTerms(*args):
  return _CoolProp.DerivTerms(*args)
DerivTerms = _CoolProp.DerivTerms


